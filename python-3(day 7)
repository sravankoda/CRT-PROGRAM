{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sravankoda/CRT-PROGRAM/blob/master/Untitled1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vWwcCtUaSZMi",
        "colab_type": "text"
      },
      "source": [
        "#basic list functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B5WK1GUCSlvo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "outputId": "b2a60e3d-ed3a-4d4a-8735-21adc530ae3a"
      },
      "source": [
        "li=[1,9,16,25,5]\n",
        "print(max(li))\n",
        "print(min(li))\n",
        "print(sum(li))\n",
        "print(sum(li)//len(li))\n",
        "li.append(29)#add the new items at li\n",
        "print(li)\n",
        "li.insert(2,56)\n",
        "print(li)\n",
        "print(li.count(9))\n",
        "print(li.index(56))\n",
        "li.sort()\n",
        "print(li)\n",
        "li.pop()\n",
        "print(li)\n",
        "li.pop(3)\n",
        "print(li)\n",
        "\n",
        "li1=[1,4,6,8]\n",
        "li.extend(li1)\n",
        "print(li)\n",
        "li.reverse()\n",
        "print(li)\n",
        "def largeNumber(li):\n",
        "   li.sort()\n",
        "   return li[-1]\n",
        "def genericLarge(li,n):\n",
        "   li.sort()\n",
        "   return li[-n]\n",
        "li=[1,23,6,3,55]     \n",
        "print(largenumber(li))\n",
        "print(genericlarge(li,2))\n",
        "def smallnumber(li):\n",
        "   li.sort()\n",
        "   return li[0]\n",
        "def genericsmall(li,n):\n",
        "   li.sort()\n",
        "   return li[n-1]\n",
        "print(smallnumber(li))\n",
        "print(genericsmall(li,2))"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "25\n",
            "1\n",
            "56\n",
            "11\n",
            "[1, 9, 16, 25, 5, 29]\n",
            "[1, 9, 56, 16, 25, 5, 29]\n",
            "1\n",
            "2\n",
            "[1, 5, 9, 16, 25, 29, 56]\n",
            "[1, 5, 9, 16, 25, 29]\n",
            "[1, 5, 9, 25, 29]\n",
            "[1, 5, 9, 25, 29, 1, 4, 6, 8]\n",
            "[8, 6, 4, 1, 29, 25, 9, 5, 1]\n",
            "55\n",
            "23\n",
            "1\n",
            "3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymfMXeOrg-5D",
        "colab_type": "text"
      },
      "source": [
        "## tuple:\n",
        "- parenthesis() -----------> tuple and square brackets[]------>list\n",
        "- difference b/w list and tuples\n",
        "   - list are mutable - can be changed/modified\n",
        "   - bused to access amd modify,add,delete data\n",
        "   - tuples are immutable - cannot be changed\n",
        "   - used to access data only"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nXKxg9H1jxho",
        "colab_type": "text"
      },
      "source": [
        "## dictionaries:\n",
        "1.it works on the concept of set unique data <br>\n",
        "2.keys,values is the unbique identifier for the value <br>\n",
        "3.each key is separated from its values with colon(:) <br>\n",
        "4.each key and value is separated with coma(,) <br>\n",
        "5.dictionaries enhanced with curly braces({}) "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nQFAZoS2lEk_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e423816e-1760-4ae5-d722-7ed8e54efeb5"
      },
      "source": [
        "d1={\"name\":\"gitam\",\"email id\":\"gitam@gmaiol.com\",\"address\":\"hyd\"}\n",
        "print(d1)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'name': 'gitam', 'email id': 'gitam@gmaiol.com', 'address': 'hyd'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rJuoo3B-lx5H",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4ea1c37a-7779-4567-bd86-c0627558e986"
      },
      "source": [
        "d1[\"name\"]"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'gitam'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TJTZoUf3mqE_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "51419119-6520-43b7-85ac-6ef9753cf8a8"
      },
      "source": [
        "d1={\"name\":\"gitam\",\"email id\":\"gitam@gmail.com\",\"address\":\"hyd\"}\n",
        "d1[\"email id\"]= \"gitampython@gmail.com\"\n",
        "d1"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'address': 'hyd', 'email id': 'gitampython@gmail.com', 'name': 'gitam'}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i2uRI-dAnGrY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "67ded9a7-f2a6-4738-c1f8-7defd3bde959"
      },
      "source": [
        "d1[\"course\"]=\"python\"\n",
        "print(d1)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'name': 'gitam', 'email id': 'gitampython@gmail.com', 'address': 'hyd', 'course': 'python'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O_mIRRtdn_Df",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "05e70d34-9b37-4d0a-d342-4fa663cd0868"
      },
      "source": [
        "del d1[\"email id\"]\n",
        "print(d1)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'name': 'gitam', 'address': 'hyd', 'course': 'python'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "irdJ3ocponGv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "faa26ee5-96bb-42c1-fa81-b3feb5bf076a"
      },
      "source": [
        "d1.keys()\n"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['name', 'address', 'course'])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WGqhJphBpIex",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9c6dff15-4968-4c23-de86-af57fc7fcc06"
      },
      "source": [
        "d1.values()"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_values(['gitam', 'hyd', 'python'])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cU0KgPh3pNPY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e27e0782-b49e-4a4e-d0d8-0d78525b8ffe"
      },
      "source": [
        "d1.items()"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_items([('name', 'gitam'), ('address', 'hyd'), ('course', 'python')])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5S0xXsA2pSXf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QXV6176GpbnC",
        "colab_type": "text"
      },
      "source": [
        "## strings:\n",
        "- strings<br>\n",
        "-string slicings<br>\n",
        "-fundamental programmimg with strings in python"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DlDyRnO2p3IC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "outputId": "4dd3842a-7642-4375-ba11-4a6ab4022aae"
      },
      "source": [
        "s1 = 'sravan'\n",
        "print(s1[0])\n",
        "print(s1[len(s1)-1])\n",
        "print(s1[-1])\n",
        "print(s1[0:3])\n",
        "print(s1[-6:])\n",
        "print(s1[1:-1])\n",
        "print(s1[-1:-3:-1])\n",
        "print(s1[len(s1)//2])\n",
        "print(s1[::2])\n",
        "print(s1[::-2])"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "s\n",
            "n\n",
            "n\n",
            "sra\n",
            "sravan\n",
            "rava\n",
            "na\n",
            "v\n",
            "saa\n",
            "nvr\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p6nhNuufu92T",
        "colab_type": "text"
      },
      "source": [
        "## reversing of string\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7xjJHjI3vYwi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "784c4aea-4689-4a75-ba48-5bbe7a20065f"
      },
      "source": [
        "def reverse(str):\n",
        "    return str[-1::-1]\n",
        "reverse(\"python\")"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'nohtyp'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ojTFSQ-xvvAw",
        "colab_type": "text"
      },
      "source": [
        "## palindrome"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qhsnMx0vv0sZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "b80569dc-e164-41ef-9210-e9ea62b28a66"
      },
      "source": [
        "def palindrome(str):\n",
        "   if str==str[-1::-1]:\n",
        "     return True\n",
        "   else:\n",
        "    return False\n",
        "print(palindrome(\"python\"))\n",
        "print(palindrome(\"tomato\"))"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n",
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sRFKUYJ4xTFd",
        "colab_type": "text"
      },
      "source": [
        "## string built-in methods:\n",
        "1.upper()---will convert the input string into upper case<br>\n",
        "2.lower()---will convert the input string into lower case"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IP5SvAJTxxYy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "2a54c76b-60b0-4879-ab2d-2f678e52d6f2"
      },
      "source": [
        "s1= 'python'\n",
        "print(s1.upper())\n",
        "print(s1.lower())"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "PYTHON\n",
            "python\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H62Wf9O0x-a5",
        "colab_type": "text"
      },
      "source": [
        "## string boolean built-in methods\n",
        "3.islower()<br>\n",
        "4.isupper()<br>\n",
        "5.istitle()<br>\n",
        "6.isnumeric()<br>\n",
        "7.isalpha()<br>\n",
        "8.isspace()"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xvfsLJD-yn3C",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "8c72ad76-e0de-44c9-ccee-1499f6696c44"
      },
      "source": [
        "s1='python'\n",
        "print(s1.islower())\n",
        "print(s1.isupper())\n",
        "print(s1.istitle())\n",
        "\n"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n",
            "False\n",
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RzcSsxLBzQNk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "8ec26d51-061a-4640-e269-ba44e7eb558f"
      },
      "source": [
        "s1='Python Programming'\n",
        "print(s1.isupper())\n",
        "print(s1.islower())\n",
        "print(s1.istitle())"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n",
            "False\n",
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xAOW7ZBp0GFX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "afa0eb08-38e5-44ec-8bd3-cb0e7d23cfa3"
      },
      "source": [
        "s1='kab1234'\n",
        "print(s1.isalpha())"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H1RzVXgg3PCD",
        "colab_type": "text"
      },
      "source": [
        "markdown:\n",
        "## String methods:\n",
        "- join() -- contcatination\n",
        "- split() -- split() returns the a list of strings separated by white space\n",
        "- replace() -- replaces the specific word/character with new word/character\n",
        "code:\n",
        "s1 = 'python'\n",
        "print(\" \".join(s1))\n",
        "print(\",\".join(s1))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uuHrC4qm4hA0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0d4e1817-e5dd-4106-b2d2-349d6a90edde"
      },
      "source": [
        "s1='python'\n",
        "print(\" \".join(s1))"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "p y t h o n\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OcEsJL3I3X1J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5e2b69ce-e454-49a4-8eb4-d73a849de754"
      },
      "source": [
        "s2=\"Python Programming is Easy to learn\"\n",
        "print(\",\".join(s2))"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "P,y,t,h,o,n, ,P,r,o,g,r,a,m,m,i,n,g, ,i,s, ,E,a,s,y, ,t,o, ,l,e,a,r,n\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t40h1EkC3m-7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9a26f8df-0ccd-4952-f317-57987f56085b"
      },
      "source": [
        "li=['Python','Programming','learn']\n",
        "print(\",\".join(li))"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Python,Programming,learn\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0MfXypBs35YH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "da99b90d-04d9-4109-bf65-8b72de5020e0"
      },
      "source": [
        "s2=\"Python Programming is Easy to learn\"\n",
        "print(s2.replace(\"gra\",\"applications\"))"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Python Proapplicationsmming is Easy to learn\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-wj6q7GH6v36",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "6ce29eda-5512-4206-8adc-aa55556fa368"
      },
      "source": [
        "s2=\"python programming easy to learn\"\n",
        "print(s2.split('a'))"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['python progr', 'mming e', 'sy to le', 'rn']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RbndS-om640I",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "9f4d821c-b743-4f41-9d1a-354e27fe53ee"
      },
      "source": [
        "s2=\"python programming easy to learn\"\n",
        "print(len(s2))\n",
        "li=s2.split() #split\n",
        "li=s2.split()\n",
        "print(li)\n",
        "print(len(li))"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "32\n",
            "['python', 'programming', 'easy', 'to', 'learn']\n",
            "5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s9cpXqQG69XA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
